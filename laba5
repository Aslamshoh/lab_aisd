 #Задана рекуррентная функция. Область определения функции – натуральные числа. Написать программу сравнительного вычисления данной функции рекурсивно и итерационно.
#Определить границы применимости рекурсивного и итерационного подхода. Результаты сравнительного исследования времени вычисления представить в табличной и графической форме.
#Вариант 2: F(0) = 5; F(1) = 1; F(n) =(-1)n*( 2F(n-1)/n! + F(n-2) /(2n)!)

import timeit
import matplotlib.pyplot as plt
import math

"""
Кэш для значений факториалов
"""
fc = {0: 1, 1: 1}

"""
Динамическая функция
"""
def df(n):
    if n not in fc:
        fc[n] = n * df(n - 1)
    return fc[n]

"""
Рекурсивная функция
"""
def rf(n):
    if n == 0:
        return 1
    else:
        return n * rf(n - 1)

"""
Итеративная функция
"""
def itf(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    return result

"""
Динамическая функция для вычисления F(n)
"""
def dF(n, cache={0: 5, 1: 1}):
    if n in cache:
        return cache[n]
    else:
        """
        Здесь используем dynamic_factorial для вычисления факториалов
        """
        result = ((-1)**n) * ((2 * dF(n - 1, cache)) / df(n) + dF(n - 2, cache) / (2 * n * df(n - 1)))
        cache[n] = result
        return result

"""
Функция для измерения времени выполнения
"""
def score_time(func, n):
    return timeit.timeit(lambda: func(n), number=1000)

"""
Значения n для которых мы хотим измерить время выполнения
"""
nv = range(1, 10)
rt = []
it = []
dt = []

"""
Измерение времени выполнения для каждого значения n
"""
for n in nv:
    rt.append(score_time(rf, n))
    it.append(score_time(itf, n))
    dt.append(score_time(dF, n))

"""
Вывод результатов в табличной форме
"""
print(f"{'n':<10}{'Рекурсивная функция (мс)':<25}{'Итерационная функция (мс)':<25}{'Динамическая функция (мс)':<25}")
for i, n in enumerate(nv):
    print(f"{n:<10}{rt[i]:<25}{it[i]:<25}{dt[i]:<25}")

"""
График
"""
plt.plot(nv, rt, label='Рекурсивно')
plt.plot(nv, it, label='Итерационно')
plt.plot(nv, dt, label='Динамическое')
plt.xlabel('n')
plt.ylabel('Время (в миллисекундах)')
plt.legend()
plt.title('Сравнение времени вычисления функции F(n)')
plt.show()
