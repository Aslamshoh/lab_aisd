Задание на л.р. №8 ООП 24
Требуется написать объектно-ориентированную программу с графическим интерфейсом в соответствии со своим вариантом. 
В программе должны быть реализованы минимум один класс, три атрибута, четыре метода (функции). 
Ввод данных из файла с контролем правильности ввода. 
Базы данных использовать нельзя. При необходимости сохранять информацию в виде файлов, разделяя значения запятыми или пробелами. 
Для GUI использовать библиотеку tkinter.


Вариант 30
Объекты – отрезки
Функции:	сегментация
визуализация
раскраска
перемещение на плоскости




import tkinter as tk
from tkinter import Canvas, filedialog, messagebox
import random

class Star:
    def __init__(self, x, y, size, color):
        self.x = x
        self.y = y
        self.size = size
        self.color = color

    def move(self, dx, dy):
        """Перемещение звезды на плоскости"""
        self.x += dx
        self.y += dy

    def change_color(self, new_color):
        """Изменение цвета звезды"""
        self.color = new_color

    def segment(self, quadrant):
        """Переместить звезду в заданный сегмент"""
        if quadrant == 1:
            self.x = random.randint(400, 800)
            self.y = random.randint(0, 300)
        elif quadrant == 2:
            self.x = random.randint(0, 400)
            self.y = random.randint(0, 300)
        elif quadrant == 3:
            self.x = random.randint(0, 400)
            self.y = random.randint(300, 600)
        elif quadrant == 4:
            self.x = random.randint(400, 800)
            self.y = random.randint(300, 600)

    def draw(self, canvas):
        """Отрисовка звезды на плоскости"""
        x1, y1 = self.x - self.size, self.y - self.size
        x2, y2 = self.x + self.size, self.y + self.size
        canvas.create_oval(x1, y1, x2, y2, fill=self.color, outline=self.color)

class StarApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Star Manager")
        self.canvas = Canvas(root, width=800, height=600, bg="black")
        self.canvas.pack()

        self.stars = []
        self.setup_ui()

    def setup_ui(self):
        frame = tk.Frame(self.root)
        frame.pack(side=tk.BOTTOM)

        add_button = tk.Button(frame, text="Add Star", command=self.add_star)
        add_button.pack(side=tk.LEFT)

        move_button = tk.Button(frame, text="Move Stars", command=self.move_stars)
        move_button.pack(side=tk.LEFT)

        color_button = tk.Button(frame, text="Change Color", command=self.change_star_color)
        color_button.pack(side=tk.LEFT)

        segment_button = tk.Button(frame, text="Segment Stars", command=self.segment_stars)
        segment_button.pack(side=tk.LEFT)

        load_button = tk.Button(frame, text="Load Stars from File", command=self.load_stars)
        load_button.pack(side=tk.LEFT)

    def add_star(self):
        """Добавление новой звезды случайным образом"""
        x = random.randint(50, 750)
        y = random.randint(50, 550)
        size = random.randint(5, 20)
        color = random.choice(["red", "blue", "green", "yellow", "white"])
        star = Star(x, y, size, color)
        self.stars.append(star)
        self.update_canvas()

    def move_stars(self):
        """Перемещение всех звезд на случайное расстояние"""
        for star in self.stars:
            dx = random.randint(-20, 20)
            dy = random.randint(-20, 20)
            star.move(dx, dy)
        self.update_canvas()

    def change_star_color(self):
        """Изменение цвета всех звезд случайным образом"""
        for star in self.stars:
            new_color = random.choice(["red", "blue", "green", "yellow", "white"])
            star.change_color(new_color)
        self.update_canvas()

    def segment_stars(self):
        """Сегментация звезд по случайным квадрантам"""
        for star in self.stars:
            quadrant = random.randint(1, 4)
            star.segment(quadrant)
        self.update_canvas()

    def load_stars(self):
        """Загрузка звезд из файла"""
        file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
        if file_path:
            try:
                with open(file_path, "r") as file:
                    for line in file:
                        parts = line.strip().split(",")
                        if len(parts) == 4:
                            x, y, size, color = parts
                            star = Star(int(x), int(y), int(size), color)
                            self.stars.append(star)
                self.update_canvas()
            except Exception as e:
                messagebox.showerror("Ошибка", f"Не удалось загрузить звезды: {e}")

    def update_canvas(self):
        """Обновление отображения всех звезд на плоскости"""
        self.canvas.delete("all")
        for star in self.stars:
            star.draw(self.canvas)

if __name__ == "__main__":
    root = tk.Tk()
    app = StarApp(root)
    root.mainloop()
