#Усложнить написанную программу, введя по своему усмотрению в условие минимум одно ограничение на характеристики 
#объектов (которое будет сокращать количество переборов)  и целевую функцию для нахождения оптимального  решения.
#В филармонии К музыкальных инструментов (музыкантов) Т типов. Сформировать все возможные варианты трио.

from itertools import combinations
import timeit

# ввод количества инструментов и количество типов инструментов
K = int(input('Введите количество инструментов: '))
T = int(input('Введите количество типов инструментов: '))

# список инструментов
instruments = list(range(K))

# словарь частотных характеристик инструментов
frequencies = {i: i % T for i in instruments}

# словарь диапазонов частотных характеристик инструментов
ranges = {i: (i % T, (i % T) + T - 1) for i in instruments}

# функция для проверки, находится ли частота инструмента в заданном диапазоне
def is_in_range(instrument, frequency_range):
    return ranges[instrument][0] <= frequency_range <= ranges[instrument][1]

# генерация всех возможных комбинаций инструментов длины 3, используя по одному инструменту из каждого типа
trios = []
for i in range(K):
    if i % T == 0:
        for j in range(K):
            if j % T == 1:
                for k in range(K):
                    if k % T == 2:
                        trios.append((instruments[i], instruments[j], instruments[k]))

# фильтрация комбинаций, которые не удовлетворяют условию
trios = filter(lambda x: len(set(x)) == 3 and all(is_in_range(i, frequencies[j]) for i, j in zip(x, range(T))), trios)

# вывод всех возможных трио
print('Все возможные трио:')
for trio in trios:
    print(trio)

# алгоритмический подход
def algorithmic_approach():
    trios = []
    for i in range(K):
        if i % T == 0:
            for j in range(K):
                if j % T == 1:
                    for k in range(K):
                        if k % T == 2:
                            if all(is_in_range(x, frequencies[y]) for x, y in zip((i, j, k), range(T))):
                                trios.append((i, j, k))
    return trios

# функциональный подход
def functional_approach():
    trios = [(i, j, k) for i in instruments if i % T == 0 for j in instruments if j % T == 1 for k in instruments if k % T == 2]
    trios = filter(lambda x: len(set(x)) == 3 and all(is_in_range(i, frequencies[j]) for i, j in zip(x, range(T))), trios)
    return trios

algorithmic_time = timeit.timeit(algorithmic_approach, number=10000)
functional_time = timeit.timeit(functional_approach, number=10000)

print('Algorithmic approach time:', algorithmic_time)
print('Functional approach time:', functional_time)

print('Списки типов инструментов:')
for i in range(T):
    instruments_of_type = [j for j in instruments if frequencies[j] == i]
    range_of_type = ranges[instruments_of_type[0]]
    print('Тип', i+1, instruments_of_type, 'диапазон', range_of_type)
